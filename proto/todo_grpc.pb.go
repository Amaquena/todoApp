// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoAppAPIClient is the client API for TodoAppAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoAppAPIClient interface {
	// Add an item
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	// Get single Item
	GetItem(ctx context.Context, in *GetSingleItemRequest, opts ...grpc.CallOption) (*GetSingleItemResponse, error)
	// Get All items
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	// Update an Item Description
	UpdateItemDescription(ctx context.Context, in *UpdateItemDescriptionRequest, opts ...grpc.CallOption) (*UpdateItemDescriptionResponse, error)
	// Update an Item Completion
	UpdateItemCompletion(ctx context.Context, in *UpdateItemCompletionRequest, opts ...grpc.CallOption) (*UpdateItemCompletionResponse, error)
	// Delete an Item
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
}

type todoAppAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoAppAPIClient(cc grpc.ClientConnInterface) TodoAppAPIClient {
	return &todoAppAPIClient{cc}
}

func (c *todoAppAPIClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoAppAPIClient) GetItem(ctx context.Context, in *GetSingleItemRequest, opts ...grpc.CallOption) (*GetSingleItemResponse, error) {
	out := new(GetSingleItemResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoAppAPIClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoAppAPIClient) UpdateItemDescription(ctx context.Context, in *UpdateItemDescriptionRequest, opts ...grpc.CallOption) (*UpdateItemDescriptionResponse, error) {
	out := new(UpdateItemDescriptionResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/UpdateItemDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoAppAPIClient) UpdateItemCompletion(ctx context.Context, in *UpdateItemCompletionRequest, opts ...grpc.CallOption) (*UpdateItemCompletionResponse, error) {
	out := new(UpdateItemCompletionResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/UpdateItemCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoAppAPIClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/todoapp.TodoAppAPI/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoAppAPIServer is the server API for TodoAppAPI service.
// All implementations should embed UnimplementedTodoAppAPIServer
// for forward compatibility
type TodoAppAPIServer interface {
	// Add an item
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	// Get single Item
	GetItem(context.Context, *GetSingleItemRequest) (*GetSingleItemResponse, error)
	// Get All items
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	// Update an Item Description
	UpdateItemDescription(context.Context, *UpdateItemDescriptionRequest) (*UpdateItemDescriptionResponse, error)
	// Update an Item Completion
	UpdateItemCompletion(context.Context, *UpdateItemCompletionRequest) (*UpdateItemCompletionResponse, error)
	// Delete an Item
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
}

// UnimplementedTodoAppAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTodoAppAPIServer struct {
}

func (UnimplementedTodoAppAPIServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedTodoAppAPIServer) GetItem(context.Context, *GetSingleItemRequest) (*GetSingleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTodoAppAPIServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedTodoAppAPIServer) UpdateItemDescription(context.Context, *UpdateItemDescriptionRequest) (*UpdateItemDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemDescription not implemented")
}
func (UnimplementedTodoAppAPIServer) UpdateItemCompletion(context.Context, *UpdateItemCompletionRequest) (*UpdateItemCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemCompletion not implemented")
}
func (UnimplementedTodoAppAPIServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}

// UnsafeTodoAppAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoAppAPIServer will
// result in compilation errors.
type UnsafeTodoAppAPIServer interface {
	mustEmbedUnimplementedTodoAppAPIServer()
}

func RegisterTodoAppAPIServer(s grpc.ServiceRegistrar, srv TodoAppAPIServer) {
	s.RegisterService(&TodoAppAPI_ServiceDesc, srv)
}

func _TodoAppAPI_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoAppAPI_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).GetItem(ctx, req.(*GetSingleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoAppAPI_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoAppAPI_UpdateItemDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).UpdateItemDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/UpdateItemDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).UpdateItemDescription(ctx, req.(*UpdateItemDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoAppAPI_UpdateItemCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).UpdateItemCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/UpdateItemCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).UpdateItemCompletion(ctx, req.(*UpdateItemCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoAppAPI_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoAppAPIServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoapp.TodoAppAPI/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoAppAPIServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoAppAPI_ServiceDesc is the grpc.ServiceDesc for TodoAppAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoAppAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoapp.TodoAppAPI",
	HandlerType: (*TodoAppAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _TodoAppAPI_AddItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TodoAppAPI_GetItem_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _TodoAppAPI_GetAllItems_Handler,
		},
		{
			MethodName: "UpdateItemDescription",
			Handler:    _TodoAppAPI_UpdateItemDescription_Handler,
		},
		{
			MethodName: "UpdateItemCompletion",
			Handler:    _TodoAppAPI_UpdateItemCompletion_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _TodoAppAPI_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
