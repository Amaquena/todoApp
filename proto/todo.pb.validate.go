// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetDescription()) > 255 {
		err := ItemValidationError{
			field:  "Description",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Completed

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on AddItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddItemRequestMultiError,
// or nil if none found.
func (m *AddItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetItem() == nil {
		err := AddItemRequestValidationError{
			field:  "Item",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddItemRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddItemRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddItemRequestMultiError(errors)
	}

	return nil
}

// AddItemRequestMultiError is an error wrapping multiple validation errors
// returned by AddItemRequest.ValidateAll() if the designated constraints
// aren't met.
type AddItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemRequestMultiError) AllErrors() []error { return m }

// AddItemRequestValidationError is the validation error returned by
// AddItemRequest.Validate if the designated constraints aren't met.
type AddItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemRequestValidationError) ErrorName() string { return "AddItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemRequestValidationError{}

// Validate checks the field values on AddItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddItemResponseMultiError, or nil if none found.
func (m *AddItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddItemResponseMultiError(errors)
	}

	return nil
}

// AddItemResponseMultiError is an error wrapping multiple validation errors
// returned by AddItemResponse.ValidateAll() if the designated constraints
// aren't met.
type AddItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemResponseMultiError) AllErrors() []error { return m }

// AddItemResponseValidationError is the validation error returned by
// AddItemResponse.Validate if the designated constraints aren't met.
type AddItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemResponseValidationError) ErrorName() string { return "AddItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemResponseValidationError{}

// Validate checks the field values on GetSingleItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleItemRequestMultiError, or nil if none found.
func (m *GetSingleItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSingleItemRequestMultiError(errors)
	}

	return nil
}

// GetSingleItemRequestMultiError is an error wrapping multiple validation
// errors returned by GetSingleItemRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSingleItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleItemRequestMultiError) AllErrors() []error { return m }

// GetSingleItemRequestValidationError is the validation error returned by
// GetSingleItemRequest.Validate if the designated constraints aren't met.
type GetSingleItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleItemRequestValidationError) ErrorName() string {
	return "GetSingleItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleItemRequestValidationError{}

// Validate checks the field values on GetSingleItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleItemResponseMultiError, or nil if none found.
func (m *GetSingleItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSingleItemResponseMultiError(errors)
	}

	return nil
}

// GetSingleItemResponseMultiError is an error wrapping multiple validation
// errors returned by GetSingleItemResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSingleItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleItemResponseMultiError) AllErrors() []error { return m }

// GetSingleItemResponseValidationError is the validation error returned by
// GetSingleItemResponse.Validate if the designated constraints aren't met.
type GetSingleItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleItemResponseValidationError) ErrorName() string {
	return "GetSingleItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleItemResponseValidationError{}

// Validate checks the field values on GetAllItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllItemsRequestMultiError, or nil if none found.
func (m *GetAllItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllItemsRequestMultiError(errors)
	}

	return nil
}

// GetAllItemsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllItemsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllItemsRequestMultiError) AllErrors() []error { return m }

// GetAllItemsRequestValidationError is the validation error returned by
// GetAllItemsRequest.Validate if the designated constraints aren't met.
type GetAllItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllItemsRequestValidationError) ErrorName() string {
	return "GetAllItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllItemsRequestValidationError{}

// Validate checks the field values on GetAllItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllItemsResponseMultiError, or nil if none found.
func (m *GetAllItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllItemsResponseMultiError(errors)
	}

	return nil
}

// GetAllItemsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllItemsResponseMultiError) AllErrors() []error { return m }

// GetAllItemsResponseValidationError is the validation error returned by
// GetAllItemsResponse.Validate if the designated constraints aren't met.
type GetAllItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllItemsResponseValidationError) ErrorName() string {
	return "GetAllItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllItemsResponseValidationError{}

// Validate checks the field values on UpdateItemDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemDescriptionRequestMultiError, or nil if none found.
func (m *UpdateItemDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateItemDescriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateItemDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateItemDescriptionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateItemDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemDescriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemDescriptionRequestMultiError) AllErrors() []error { return m }

// UpdateItemDescriptionRequestValidationError is the validation error returned
// by UpdateItemDescriptionRequest.Validate if the designated constraints
// aren't met.
type UpdateItemDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemDescriptionRequestValidationError) ErrorName() string {
	return "UpdateItemDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemDescriptionRequestValidationError{}

// Validate checks the field values on UpdateItemDescriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemDescriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemDescriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateItemDescriptionResponseMultiError, or nil if none found.
func (m *UpdateItemDescriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemDescriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateItemDescriptionResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateItemDescriptionResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemDescriptionResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateItemDescriptionResponseMultiError(errors)
	}

	return nil
}

// UpdateItemDescriptionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateItemDescriptionResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateItemDescriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemDescriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemDescriptionResponseMultiError) AllErrors() []error { return m }

// UpdateItemDescriptionResponseValidationError is the validation error
// returned by UpdateItemDescriptionResponse.Validate if the designated
// constraints aren't met.
type UpdateItemDescriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemDescriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemDescriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemDescriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemDescriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemDescriptionResponseValidationError) ErrorName() string {
	return "UpdateItemDescriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemDescriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemDescriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemDescriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemDescriptionResponseValidationError{}

// Validate checks the field values on UpdateItemCompletionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemCompletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemCompletionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemCompletionRequestMultiError, or nil if none found.
func (m *UpdateItemCompletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemCompletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Completed

	if len(errors) > 0 {
		return UpdateItemCompletionRequestMultiError(errors)
	}

	return nil
}

// UpdateItemCompletionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateItemCompletionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateItemCompletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemCompletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemCompletionRequestMultiError) AllErrors() []error { return m }

// UpdateItemCompletionRequestValidationError is the validation error returned
// by UpdateItemCompletionRequest.Validate if the designated constraints
// aren't met.
type UpdateItemCompletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemCompletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemCompletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemCompletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemCompletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemCompletionRequestValidationError) ErrorName() string {
	return "UpdateItemCompletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemCompletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemCompletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemCompletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemCompletionRequestValidationError{}

// Validate checks the field values on UpdateItemCompletionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemCompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemCompletionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemCompletionResponseMultiError, or nil if none found.
func (m *UpdateItemCompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemCompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateItemCompletionResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateItemCompletionResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemCompletionResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateItemCompletionResponseMultiError(errors)
	}

	return nil
}

// UpdateItemCompletionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateItemCompletionResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateItemCompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemCompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemCompletionResponseMultiError) AllErrors() []error { return m }

// UpdateItemCompletionResponseValidationError is the validation error returned
// by UpdateItemCompletionResponse.Validate if the designated constraints
// aren't met.
type UpdateItemCompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemCompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemCompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemCompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemCompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemCompletionResponseValidationError) ErrorName() string {
	return "UpdateItemCompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemCompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemCompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemCompletionResponseValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemRequestMultiError, or nil if none found.
func (m *DeleteItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteItemRequestMultiError(errors)
	}

	return nil
}

// DeleteItemRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteItemRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemRequestMultiError) AllErrors() []error { return m }

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemResponseMultiError, or nil if none found.
func (m *DeleteItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteItemResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteItemResponseMultiError(errors)
	}

	return nil
}

// DeleteItemResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteItemResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemResponseMultiError) AllErrors() []error { return m }

// DeleteItemResponseValidationError is the validation error returned by
// DeleteItemResponse.Validate if the designated constraints aren't met.
type DeleteItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemResponseValidationError) ErrorName() string {
	return "DeleteItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemResponseValidationError{}
